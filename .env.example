# Astral SDK Environment Configuration
# Copy this file to .env and fill in your actual values

# =============================================================================
# RPC ENDPOINTS - Blockchain Connection URLs
# =============================================================================

# Ethereum Sepolia Testnet (required for development/testing)
SEPOLIA_RPC_URL=https://sepolia.infura.io/v3/YOUR_INFURA_API_KEY

# Ethereum Mainnet (for production use)
ETHEREUM_RPC_URL=https://mainnet.infura.io/v3/YOUR_INFURA_API_KEY

# Base Network (Layer 2)
BASE_RPC_URL=https://base-mainnet.infura.io/v3/YOUR_INFURA_API_KEY

# Base Sepolia Testnet 
BASE_SEPOLIA_RPC_URL=https://base-sepolia.infura.io/v3/YOUR_INFURA_API_KEY

# Arbitrum One (Layer 2)
ARBITRUM_RPC_URL=https://arbitrum-mainnet.infura.io/v3/YOUR_INFURA_API_KEY

# Arbitrum Sepolia Testnet
ARBITRUM_SEPOLIA_RPC_URL=https://arbitrum-sepolia.infura.io/v3/YOUR_INFURA_API_KEY

# Optimism (Layer 2)
OPTIMISM_RPC_URL=https://optimism-mainnet.infura.io/v3/YOUR_INFURA_API_KEY

# Celo Network
CELO_RPC_URL=https://forno.celo.org

# =============================================================================
# API KEYS - Third-party Service Authentication
# =============================================================================

# Infura API Key (for Ethereum node access)
# Get from: https://infura.io/
INFURA_API_KEY=your_infura_api_key_here

# Alchemy API Key (alternative to Infura)
# Get from: https://alchemy.com/
ALCHEMY_API_KEY=your_alchemy_api_key_here

# Astral API Configuration
# Contact Astral Protocol for API access
ASTRAL_API_URL=https://api.astral.global
ASTRAL_API_KEY=your_astral_api_key_here

# =============================================================================
# TESTING CONFIGURATION
# =============================================================================

# Private key for testing (use a test wallet with minimal funds)
# WARNING: Never use real private keys with significant funds
# This should be a dedicated test wallet for Sepolia testnet only
TEST_PRIVATE_KEY=0x1234567890123456789012345678901234567890123456789012345678901234

# Testing wallet address (derived from TEST_PRIVATE_KEY)
# Used for verification and debugging
TEST_WALLET_ADDRESS=0x1234567890123456789012345678901234567890

# =============================================================================
# IPFS CONFIGURATION
# =============================================================================

# IPFS Gateway URL for reading content
# Default public gateway (consider using a dedicated gateway for production)
IPFS_GATEWAY_URL=https://ipfs.io/ipfs/

# IPFS Node URL for uploading content (optional)
# Leave empty to use default or set up your own IPFS node
IPFS_NODE_URL=

# IPFS API Key (if using a managed IPFS service like Pinata or Web3.Storage)
IPFS_API_KEY=your_ipfs_api_key_here

# =============================================================================
# SDK CONFIGURATION
# =============================================================================

# Default chain for SDK operations (when not specified)
# Options: sepolia, ethereum, base, arbitrum, optimism, celo
DEFAULT_CHAIN=sepolia

# Enable debug mode for SDK operations
# Set to 'true' to enable verbose logging
SDK_DEBUG=false

# Gas price multiplier for transaction speed (1.0 = normal, 1.5 = faster)
GAS_MULTIPLIER=1.0

# =============================================================================
# DEVELOPMENT TOOLS
# =============================================================================

# Enable additional development features
DEV_MODE=true

# Log level for development (error, warn, info, debug)
LOG_LEVEL=info

# Enable performance monitoring
ENABLE_METRICS=false

# =============================================================================
# SECURITY NOTES
# =============================================================================

# 1. Never commit your .env file to version control
# 2. Use separate API keys for development and production
# 3. Regularly rotate your API keys
# 4. Use environment-specific configurations
# 5. Test with minimal funds on testnets only
# 6. Consider using a hardware wallet for production